---
title: "Data Pipeline"
author: "Lee Durbin"
format: html
---

## Getting Started

If you want to follow along, start by running `r renv::restore()` after cloning this repo to make sure you have the same packages as me.

Let's load the packages we'll need:

```{r}
#| output: false

library(googleCloudStorageR)
library(janeaustenr)
library(tidytext)
library(dplyr)
```


I'm assuming that you have a Google Cloud account, you've created a new project, and you've created a service account with the permissions described in this video. I also assume you've downloaded your key as a JSON file, and you're pointing to that file in a .Renviron file in this project as follows:

```{r service_key}
#| eval: false

GCS_AUTH_FILE = "/path/to/key-file-name.json"
```

Let's configure the settings for our Google Project. We'll use the [googleCloudStorageR](https://code.markedmondson.me/googleCloudStorageR/articles/googleCloudStorageR.html) package for this, which will guide us through the process. Assuming you have the .Renviron file popled as described above, just run the following:

```{r gcp_setup}
#| eval: false

gcs_setup()
```

## Infrastructure as Code

Let's create a new bucket where we'll store our data. We'll need to make we're using a unique name for the new bucket, so to have some fun let's grab a couple of words from the works of Jane Austen, following along with [Julie Silge's instructions](https://github.com/juliasilge/tidytext) for her tidytext package:

```{r austen_words}

austen_words <- austen_books() |> 
  mutate(line = row_number(), .by = "book") |> 
  unnest_tokens(word, text) |> 
  anti_join(get_stopwords())

set.seed(10)

bucket_words <- austen_words |> 
  pull(word) |> 
  unique() |> 
  sample(2)

bucket_numbers <- round(runif(1, 1, 10000))

```

Notice that I'm calling an environment variable again, which is my GCP project ID that is stored in the .Renviron file we created earlier. You can see how I set that at the top of the following code chunk, followed by the call to GCP:

```{r create_bucket}
#| eval: false

Sys.setenv("PROJECT_ID", "myprojectid-1234")

gcs_create_bucket(
  name = paste0(bucket_words[1], "_", bucket_words[2], bucket_numbers),
  projectId = Sys.getenv("PROJECT_ID"),
  location = "US",
  storageClass = c("MULTI_REGIONAL"),
  predefinedAcl = c("projectPrivate"),
  predefinedDefaultObjectAcl = c("bucketOwnerFullControl"),
  projection = c("noAcl")
)

```

If all went well, you should see some text in the console which will confirm that the bucket creation was successful.
